/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Bidding_folder;

import Home_folder.Home_form;
import java.awt.Image;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import player_bidding.registration.User;
import player_bidding.registration.PL_VIEWS;
import validationCheck.validationCheck;


/**
 *
 * @author 01957
 */
public class Player_Bidding extends javax.swing.JFrame {

   
    String team_name,category1;
            int price=0,player_id,ss_MAX_PRICE=0,balancecheck,batsman,bowler;
            
            int PROPOSAL_PRICE_INT;
            int exitteamcheckid;
    /**
     * Creates new form Player_Registration
     */
            //FRAME DEFINE
    public Player_Bidding() throws ClassNotFoundException {
        initComponents();
        this.setVisible(true);
        this.setSize(1200,1000);
        this.setLocationRelativeTo(null);
       userList();
       show_user(pos);
       check();
       reamin();
      
    }
     int pos=0;
     //STORE DATA IN ARRAYLIST
 public ArrayList<User> userList() throws ClassNotFoundException{
        ArrayList<User> userList=new ArrayList<>(); 
         try {
            
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url="jdbc:sqlserver://SADDAMNVN:1433;databaseName=Player_bidding;integratedSecurity=true;";
            java.sql.Connection  con =DriverManager.getConnection(url);
         
            String query="select ID, NAME,CATEGORY,DEPARTMENT_NAME,IMAGE,PROPOSAL_PRICE,TOTAL_RUN from PLAYER_REGISTRATION";
              Statement state=con.createStatement();
            ResultSet rs= state.executeQuery(query);
            User user;
            while(rs.next())
            {
               // System.out.println(rs.getInt("AVG_RUN"));
              user=new User(rs.getInt("ID"),rs.getString("NAME"),rs.getString("CATEGORY"),rs.getString("DEPARTMENT_NAME"),rs.getBytes("IMAGE"),rs.getInt("PROPOSAL_PRICE"),rs.getInt("TOTAL_RUN")); 
              //System.out.println(user);
           userList.add(user);
           //System.out.println(userList);
            }
            
           
            
        } catch (SQLException ex) {
            Logger.getLogger(PL_VIEWS.class.getName()).log(Level.SEVERE, null, ex);
        }
        return userList;
    }
 //SHOWING STORED DATA
   public void show_user(int index) throws ClassNotFoundException 
   {
      ArrayList<User> list=userList();
      // String imageName=imagesList[index];
         byte[] img=list.get(index).getPICTURE();
        ImageIcon image = new ImageIcon(img);
        Image im = image.getImage();
        Image myImg = im.getScaledInstance(IMAGE.getWidth(),IMAGE.getHeight(),Image.SCALE_SMOOTH);
        ImageIcon newImage = new ImageIcon(myImg);
        IMAGE.setIcon(newImage);
        exitteamcheckid=list.get(index).getID();
        NAME.setText(list.get(index).getNAME());
       DEPT_NAME.setText(list.get(index).getDEPARTMENT_NAME());
       CATEGORY.setText(list.get(index).getCATEGORY());
       String ss= Integer.toString(list.get(index).getPROPOSAL_PRICE());
       PROPOSAL_PRICE_INT=list.get(index).getPROPOSAL_PRICE();
       PRICE.setText(ss);
      System.out.println(list.get(index).getNAME());
   }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        IMAGE = new javax.swing.JLabel();
        start = new javax.swing.JButton();
        end = new javax.swing.JButton();
        next = new javax.swing.JButton();
        previous = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        MAX_BID_PRICE = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        TEAM_NAME = new javax.swing.JTextField();
        BID_PRICE = new javax.swing.JTextField();
        BID_NOW = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        TERMINETED = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        myTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        NAME = new javax.swing.JTextField();
        CATEGORY = new javax.swing.JTextField();
        DEPT_NAME = new javax.swing.JTextField();
        PRICE = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        myTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(255, 204, 51));

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("Bidding System");

        jButton4.setText("BACK");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("LOGOUT");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(456, 456, 456)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 500, Short.MAX_VALUE)
                .addComponent(jButton4)
                .addGap(32, 32, 32)
                .addComponent(jButton5)
                .addGap(38, 38, 38))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 1280, 100);

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        start.setText("Start");
        start.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                startMouseClicked(evt);
            }
        });

        end.setText("End");
        end.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                endMouseClicked(evt);
            }
        });
        end.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endActionPerformed(evt);
            }
        });

        next.setText("Next");
        next.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nextMouseClicked(evt);
            }
        });

        previous.setText("Previous");
        previous.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                previousMouseClicked(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(102, 153, 255));
        jButton1.setText("MAX_BID_PRICE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        MAX_BID_PRICE.setText("0");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(IMAGE, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(MAX_BID_PRICE, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(start)
                                .addGap(18, 18, 18)
                                .addComponent(previous)
                                .addGap(18, 18, 18)
                                .addComponent(next)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(end)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(72, 72, 72))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(IMAGE, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(end)
                    .addComponent(start)
                    .addComponent(next)
                    .addComponent(previous))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(MAX_BID_PRICE))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2);
        jPanel2.setBounds(0, 110, 360, 280);

        jPanel4.setBackground(new java.awt.Color(153, 255, 255));

        jLabel1.setText("ENTER TEAM NAME");

        BID_PRICE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BID_PRICEMouseClicked(evt);
            }
        });
        BID_PRICE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BID_PRICEActionPerformed(evt);
            }
        });

        BID_NOW.setText("BID NOW");
        BID_NOW.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BID_NOWMouseClicked(evt);
            }
        });

        jLabel6.setText("ENTER PRICE");

        TERMINETED.setText("TERMINATED");
        TERMINETED.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TERMINETEDMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BID_PRICE, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TEAM_NAME, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(BID_NOW)
                        .addGap(35, 35, 35)
                        .addComponent(TERMINETED)))
                .addContainerGap(94, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TEAM_NAME, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BID_PRICE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(39, 39, 39)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BID_NOW)
                    .addComponent(TERMINETED))
                .addContainerGap(126, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel4);
        jPanel4.setBounds(870, 110, 410, 280);

        myTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TEAM_NAME", "PRICE"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(myTable);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(40, 430, 280, 320);

        jPanel3.setBackground(new java.awt.Color(204, 204, 255));
        jPanel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel3MouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Name");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("DETP_NAME");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("CATEGORY");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("PRICE");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(NAME, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                            .addComponent(DEPT_NAME)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(41, 41, 41)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CATEGORY)
                            .addComponent(PRICE)))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(NAME, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(DEPT_NAME, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(CATEGORY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(PRICE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(74, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel3);
        jPanel3.setBounds(370, 110, 490, 280);

        myTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TEAM_NMAE", "REMAINING BALANCE", "REMAINING BATSMAN", "REMAINING BOWLER", "REMAINING ALLROUNDER"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(myTable1);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(350, 430, 790, 320);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BID_PRICEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BID_PRICEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BID_PRICEActionPerformed

    private void startMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startMouseClicked
    pos=0;
        try {
            show_user(pos);
            
// TODO add your handling code here:
        } catch (ClassNotFoundException ex) {
           Logger.getLogger(Player_Bidding.class.getName()).log(Level.SEVERE, null, ex);
       }
    }//GEN-LAST:event_startMouseClicked

    private void endMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_endMouseClicked
      
   //END PLAYER SHOWING
       try { 
           pos=userList().size()-1;
           show_user(pos);
// TODO add your handling code here:
       } catch (ClassNotFoundException ex) {
           Logger.getLogger(Player_Bidding.class.getName()).log(Level.SEVERE, null, ex);
       }
    }//GEN-LAST:event_endMouseClicked

    private void previousMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_previousMouseClicked
      //PREVIUS PLAYER SHOWING
        try {
            pos=pos-1;
            if(pos<0)
            {
                pos=0;
            }      
            show_user(pos);
// TODO add your handling code here:
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Player_Bidding.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_previousMouseClicked

    private void nextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextMouseClicked
      //NEXT PLAYER SHOWING
        try {
            pos=pos+1;
            if(pos>=userList().size())
            {
                pos=userList().size()-1;
            }   
            show_user(pos);
          
            
            
// TODO add your handling code here:
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Player_Bidding.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_nextMouseClicked
public ArrayList<Users> userLists() throws ClassNotFoundException
{
    //STORE INFO FROM TMP_BIDDING_TABLE IN ARRAYLIST
     ArrayList<Users> userLists=new ArrayList<>(); 
         try {
            
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String urll="jdbc:sqlserver://SADDAMNVN:1433;databaseName=Player_bidding;integratedSecurity=true;";
            java.sql.Connection  con =DriverManager.getConnection(urll);
           String query1="select * from TMP_BIDDING_TABLE";
           Statement state=con.createStatement();
            ResultSet rs= state.executeQuery(query1);
            Users users;
            while(rs.next())
            {
               users=new Users(rs.getString("TEAM_NAME"),rs.getInt("PRICE"),rs.getInt("PLAYER_ID"),rs.getString("CATEGORY"));
                userLists.add(users);
            }
           
            
         
           
        } catch (SQLException ex) {
            Logger.getLogger(PL_VIEWS.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    
return userLists;
}
//SHOWING TMP_BIDDING_TABLE DATA
public void show_users() throws ClassNotFoundException
{
  ArrayList<Users> list=userLists();
      DefaultTableModel model=(DefaultTableModel) myTable.getModel();
     Object[]row =new Object[2];
     // System.out.println(list.size());
     for(int i=0;i<list.size();i++)
     {
       row[0]=list.get(i).getTEAM_NAME();
       row[1]=list.get(i).getPRICE();
       //row[2]=list.get(i).getPLAYER_ID();
      // row[3]=list.get(i).getCATEGORY();
       
         // System.out.println(row[3]);
       model.addRow(row);
     }
    
}
//VALIDATION CHECKING
    private void BID_NOWMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BID_NOWMouseClicked
       validationCheck ss=new validationCheck();
       boolean emch=ss.emptycheck(TEAM_NAME.getText(),(BID_PRICE.getText()));
      
       if(emch==false)
       {
           JOptionPane.showMessageDialog(null,"Please Fill Up All Fields");  
       }
       else
       {
      
         exitteamchecking etc=new exitteamchecking();
         boolean exitteamcheck=etc.teamcheck(exitteamcheckid);
         int balancecheck=etc.balancechaking(TEAM_NAME.getText(),Integer.valueOf(BID_PRICE.getText()));
         System.out.println(balancecheck);
         if(bowler>=7)
         {
             JOptionPane.showMessageDialog(null,"SORRY !! You  bowler budget(7) will cross"); 
         }
         else
         {
         if(batsman>=7)
         {
             JOptionPane.showMessageDialog(null,"SORRY !! You  batsman budget(7) will cross"); 
         }
         else
         {
             
         if(1000<(balancecheck+Integer.valueOf(BID_PRICE.getText())))
         {
            JOptionPane.showMessageDialog(null,"SORRY !! You budget(1000) will cross"); 
         }
         else
         {
             
         
         if(exitteamcheck)
         {
           JOptionPane.showMessageDialog(null,"SORRY !!  Player Already Solded....");
            try {
            pos=pos+1;
            if(pos>=userList().size())
            {
                pos=userList().size()-1;
            }   
            show_user(pos);
          
            
            
// TODO add your handling code here:
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Player_Bidding.class.getName()).log(Level.SEVERE, null, ex);
        }
           
         }
         else
         {
         
         int i=Integer.parseInt(BID_PRICE.getText());
          
          if(i<ss_MAX_PRICE)
          {
              JOptionPane.showMessageDialog(null,"SORRY !!  MAX PRICE EXIT....");
             //BID_NOW.setEnabled(true);
             
          }
          else
          { 
             //PLAYER PICE CHECK
              if(PROPOSAL_PRICE_INT>i)
              {
                  JOptionPane.showMessageDialog(null,"SORRY !!  LOWEST THAN PROPOSAL_PRICE....");
              }
              else
              {
                
  
                
              
         
      try {
          
               Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url="jdbc:sqlserver://SADDAMNVN:1433;databaseName=Player_bidding;integratedSecurity=true;";
            java.sql.Connection  con =DriverManager.getConnection(url);
               String querymaxC="select * from SELECTOR_REGISTRATION WHERE TEAM_NAME='"+TEAM_NAME.getText()+"' ";
           
            Statement stateC=con.createStatement();
            ResultSet rssC= stateC.executeQuery(querymaxC);
           if(rssC.next())
           {
              
            String query="INSERT INTO TMP_BIDDING_TABLE VALUES(?,?,?,?)";
            // String query="select * from PLAYER_REGISTRATION";
            PreparedStatement pst=con.prepareStatement(query);

            

            pst.setString(1,TEAM_NAME.getText());
            pst.setString(2,BID_PRICE.getText());
            String s=String.valueOf(pos+1);
            pst.setString(3,s);
            pst.setString(4,CATEGORY.getText());
            
          
            
            pst.executeUpdate();
            
            
            JOptionPane.showMessageDialog(null,"Inserted SuccessFully");
            String querymax="select MAX (PRICE)AS MAX_SLARY from TMP_BIDDING_TABLE";
            Statement state=con.createStatement();
            ResultSet rss= state.executeQuery(querymax);
            while(rss.next())
            {
                 ss_MAX_PRICE=rss.getInt("MAX_SLARY");
                 String ks=String.valueOf(ss_MAX_PRICE);
               MAX_BID_PRICE.setText(ks);  
            }
           

            
            
           //show data in jTable
           userLists();
           DefaultTableModel model=(DefaultTableModel) myTable.getModel();
            model.setRowCount(0);
           show_users();
    
           // System.out.println("Connection created");  
           }
           else
           {
               JOptionPane.showMessageDialog(null,"Not Exit TEAM ");
           }
          
          
         
           

        }
        catch (Exception e) {
            System.out.println(e.toString());
            System.out.println("Sorry bro");
        }   
      }
          }
         }
         }
         }
              
       }
// TODO add your handling code here:
    }//GEN-LAST:event_BID_NOWMouseClicked
}
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void endActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_endActionPerformed
//calculating remaining info
    public void reamin()
    {
         REMAINIST TL=new REMAINIST();
      ArrayList<REMAINIST.TEAMLIST> teamlist = TL.TEAMSEARCH();
      
       DefaultTableModel model=(DefaultTableModel) myTable1.getModel();
     Object[]row =new Object[5];
     // System.out.println(list.size());
     for(int i=0;i<teamlist.size();i++)
     {
       row[0]=teamlist.get(i).getTEAM_NAME();
       //remaining balance calculate
         exitteamchecking etc=new exitteamchecking();
        balancecheck=etc.balancechaking(teamlist.get(i).getTEAM_NAME(),89);
       row[1]=1000-balancecheck;
       //remaining batsman calculate
        batsman=etc.batsmanchaking(teamlist.get(i).getTEAM_NAME());
       row[2]=7-batsman;
       //remaining Bowler calculate
        bowler=etc.bowlerchaking(teamlist.get(i).getTEAM_NAME());
       row[3]=7-bowler;
        //remaining All_Rounder calculate
               int allrounder=etc.allrounderchaking(teamlist.get(i).getTEAM_NAME());
                row[4]=7-allrounder;
         // System.out.println(row[3]);
       model.addRow(row);
     }
      
    }
    private void TERMINETEDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TERMINETEDMouseClicked
      boolean b1 = Boolean.valueOf(TEAM_NAME.getText());
      if(ss_MAX_PRICE<=0){
         JOptionPane.showMessageDialog(null,"PLAYER IS UNSOLDED");
          try {
            pos=pos+1;
            if(pos>=userList().size())
            {
                pos=userList().size()-1;
            }  
            ss_MAX_PRICE=0;
            show_user(pos);
            
             userLists();
           DefaultTableModel model=(DefaultTableModel) myTable.getModel();
            model.setRowCount(0);
           show_users();
          
            
            
// TODO add your handling code here:
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Player_Bidding.class.getName()).log(Level.SEVERE, null, ex);
        }
                
      }
      else{
          
     
        
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url="jdbc:sqlserver://SADDAMNVN:1433;databaseName=Player_bidding;integratedSecurity=true;";
            java.sql.Connection  con =DriverManager.getConnection(url);
             String querymax="select TEAM_NAME,PRICE,PLAYER_ID,CATEGORY from TMP_BIDDING_TABLE WHERE PRICE='"+MAX_BID_PRICE.getText()+"'";
            Statement state=con.createStatement();
            ResultSet rss= state.executeQuery(querymax);
            
            while(rss.next())
            {
                team_name=rss.getString("TEAM_NAME");
                price=rss.getInt("PRICE");
                player_id=rss.getInt("PLAYER_ID");
                category1=rss.getString("CATEGORY");
                System.out.println(category1);
                
               
            }
           //FOR INSERTING VALUE IN BIIDING-TABLE;
            String query="INSERT INTO BIDDING_TABLE(TEAM_NAME,PRICE,PLAYER_ID,CATEGORY) VALUES('"+team_name+"' ,'"+price+"','"+player_id+"','"+category1+"')";
                 PreparedStatement pst=con.prepareStatement(query);
                 pst.executeUpdate();
           // System.out.println(price);
            
             JOptionPane.showMessageDialog(null,"PLAYER IS SOLDED"); 
           
              //TRUNCate query
              
                Statement statee=con.createStatement();
                String querytruncate="TRUNCATE TABLE TMP_BIDDING_TABLE";
                statee.executeUpdate(querytruncate);
                MAX_BID_PRICE.setText("0");
                TEAM_NAME.setText(null);
                BID_PRICE.setText(null);
                //next playe show
                try {
            pos=pos+1;
            if(pos>=userList().size())
            {
                pos=userList().size()-1;
            } 
             ss_MAX_PRICE=0;
            show_user(pos);
             userLists();
           DefaultTableModel model=(DefaultTableModel) myTable.getModel();
            model.setRowCount(0);
           show_users();
          
            
            
// TODO add your handling code here:
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Player_Bidding.class.getName()).log(Level.SEVERE, null, ex);
        }
                
                
              
            
            System.out.println("Connection created");

        }
        catch (Exception e) {
            System.out.println(e.toString());
            System.out.println("Sorry bro");
        }    
       } 
      
      //remaining information adding
       DefaultTableModel model=(DefaultTableModel) myTable1.getModel();
            model.setRowCount(0);
     reamin();
      
// TODO add your handling code here:
        
    }//GEN-LAST:event_TERMINETEDMouseClicked

    public void check(){
        
    }
    private void BID_PRICEMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BID_PRICEMouseClicked
       
      
// TODO add your handling code here:
    }//GEN-LAST:event_BID_PRICEMouseClicked

    private void jPanel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel3MouseClicked

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
       Home_form hf=new Home_form(); 
            dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4MouseClicked

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
       System.exit(0);  

// TODO add your handling code here:
    }//GEN-LAST:event_jButton5MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Player_Bidding.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Player_Bidding.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Player_Bidding.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Player_Bidding.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Player_Bidding().setVisible(true);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Player_Bidding.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BID_NOW;
    private javax.swing.JTextField BID_PRICE;
    private javax.swing.JTextField CATEGORY;
    private javax.swing.JTextField DEPT_NAME;
    private javax.swing.JLabel IMAGE;
    private javax.swing.JButton MAX_BID_PRICE;
    private javax.swing.JTextField NAME;
    private javax.swing.JTextField PRICE;
    private javax.swing.JTextField TEAM_NAME;
    private javax.swing.JButton TERMINETED;
    private javax.swing.JButton end;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable myTable;
    private javax.swing.JTable myTable1;
    private javax.swing.JButton next;
    private javax.swing.JButton previous;
    private javax.swing.JButton start;
    // End of variables declaration//GEN-END:variables
}
